{"version":3,"sources":["components/Loader.jsx","components/Giphy.jsx","App.jsx","index.js"],"names":["Loader","className","Giphy","useState","data","setData","isLoading","setIsLoading","isError","setIsError","search","setSearch","show","setShow","gif","setGif","handleClose","useEffect","a","axios","params","api_key","limit","results","setTimeout","fetchData","showModal","id","findIndex","handleSubmit","event","preventDefault","q","role","renderError","Form","Row","Col","Label","htmlFor","visuallyHidden","Control","placeholder","onChange","target","value","Button","type","onClick","Modal","onHide","Header","closeButton","Title","title","Body","user","description","href","e","window","navigator","clipboard","writeText","bitly_url","embed_url","Footer","variant","open","xs","md","lg","map","el","Card","Img","src","images","fixed_width","url","App","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.83b3fe2f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Loader = () => {\n    return (\n        <div className=\"loader\">\n            <i className=\"fas fa-spinner fa-4x fa-spin\"></i>\n        </div>\n    )\n};\n\nexport default Loader;","import React, { useEffect, useState } from 'react';\nimport Loader from './Loader';\nimport axios from 'axios';\nimport { Card, Row, Col, Form, Button, Modal } from 'react-bootstrap';\n\nconst Giphy = () => {\n    const [data, setData] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    const [search, setSearch] = useState('');\n    const [show, setShow] = useState(false);\n    const [gif, setGif] = useState(null);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    useEffect(() => {\n       const fetchData = async () => {\n           setIsError(false);\n           setIsLoading(true);\n\n           try {\n                const results = await axios('https://api.giphy.com/v1/gifs/trending', {\n                    params: {\n                        api_key: 'mTJ4fJICNLMJzaeOZjJL7ZA7RKMold3z',\n                        limit: 100,\n                    }\n                });\n                \n                setData(results.data.data);\n           } catch (ex) {\n               setIsError(true);\n\n               setTimeout(() => setIsError(false), 1000);\n           }\n\n           setIsLoading(false);\n       };\n\n       fetchData();\n    }, []);\n\n    const showModal = (id) => {\n        const gif = data[data.findIndex(gif => gif.id === id)];\n\n        setGif(gif);\n        handleShow();\n    }\n\n    const renderGifs = () => {\n        if (isLoading) {\n            return <Loader />\n        }\n\n        return (\n            <Row xs={2} md={3} lg={4} className=\"g-4\">\n                {data.map(el => (\n                    <Col key={el.id}>\n                        <Card>\n                            <Card.Img variant=\"top\" src={el.images.fixed_width.url} onClick={() => showModal(el.id)} />\n                        </Card>\n                    </Col>\n                ))}\n            </Row>\n        )\n    };\n\n    const renderError = () => {\n        if (isError) {\n            return (\n                <div className=\"alert alert-warning alert-dismissable fade show\" role=\"alert\">\n                    Unable to get Gifs, please try again\n                </div>\n            )\n        }\n    };\n\n    const handleSearchChange = (event) => {\n        setSearch(event.target.value);\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n\n        setIsError(false);\n        setIsLoading(true);\n\n        try {\n            const results = await axios('https://api.giphy.com/v1/gifs/search', {\n                params: {\n                    api_key: 'mTJ4fJICNLMJzaeOZjJL7ZA7RKMold3z',\n                    q: search,\n                    limit: 100,\n                }\n            });\n\n            setData(results.data.data);\n        } catch (ex) {\n            setIsError(true);\n            setTimeout(() => setIsError(false), 1000);\n        }\n        \n        setIsLoading(false);        \n    };\n\n    const copyGif = (e) => {\n        e.preventDefault();\n        window.navigator.clipboard.writeText(gif.bitly_url);\n        handleClose();\n    }\n\n    const viewGif = () => {\n        window.open(gif.bitly_url, '_blank', 'noopener,noreferrer');\n        handleClose();\n    }\n\n    return (\n        <div className=\"m-2\">\n            {renderError()}\n            <Form>\n                <Row>\n                    <Col>\n                        <Form.Label htmlFor=\"inlineFormInput\" visuallyHidden>\n                            Name\n                        </Form.Label>\n                        <Form.Control\n                            className=\"mb-2\"\n                            id=\"inlineFormInput\"\n                            placeholder=\"Search for Gifs\"\n                            onChange={handleSearchChange}\n                        />\n                    </Col>\n                    <Col>\n                        <Button type=\"submit\" className=\"mb-2\" onClick={handleSubmit}>\n                            Submit\n                        </Button>\n                    </Col>\n                </Row>\n            </Form>\n            {gif && \n                <Modal show={show} onHide={handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{gif.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <p>{gif.user && gif.user.description}</p>\n                        <p>Click to copy:</p> \n                        <p><a href=\"!#\" onClick={copyGif}>{gif.embed_url}</a></p>\n                    </Modal.Body>            \n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose}>Close Me</Button>\n                        <Button variant=\"secondary\" onClick={() => viewGif(gif.bitly_url)}>Click to view</Button> \n                    </Modal.Footer>\n                </Modal>\n            }\n            <div className=\"container gifs\">{renderGifs()}</div>\n        </div>\n    )\n};\n\nexport default Giphy;","import React from 'react';\nimport Giphy from './components/Giphy';\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst App = () => {\n    return (\n        <div>\n            <Giphy />\n        </div>\n    )\n};\n\nexport default App;","import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './App';\n\nReactDom.render(<App />, document.getElementById('root'));"],"sourceRoot":""}